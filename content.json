{"posts":[{"title":"为什么要写博客","text":"之前看过一句话，原话已经不记得了，大意就是：「不总结，就等于没有看过」。在过往的职业发展过程中，确实发现，好记性不如烂笔头。日程的记录与反思才能让让你学习的东西沉淀。 为什么选择静态博客既然是总结，就需要有地方来记录，存储。 可能的选择就是 现有的在线博客系统，例如csdn/简书/cnblog等，但这种现成的blog的问题就是广告多，限制多； 自己买服务器，自建blog。之前买过腾讯的3年的服务器，自建了一个，但基本没坚持下来，还是要对自己有点b数，并不是一个能一直持之以恒的人，对服务器的利用率并不高，而且价格也不便宜，还是算了； 就是白票gitee/github的静态博客页面，也就是现在的这种方案，其实挺好，免费，免费，而且自定义能力还挺强的，是一个最优选择。 基于以上原因，所以在gitee/github上自建了一个个人blog，主要用于记录一些技术总结，生活记录而已。 为什么不用微信公众号微信公众号其实也是一个很好的记录的地方，而且触达性比较好（虽然现在改版后，触达性差一些），但是个人觉得微信公众号偏严肃，一定程度上无法畅所欲言，相对来说，还是博客的方式更合适，随时更改，随时发布，不用考虑太多。","link":"/2023/12/08/why-blog/"},{"title":"spring-ApplicationContext","text":"作为一个半路出家的java开发，虽然在大部分时候，对于工作没有任何影响，毕竟大部分的业务代码，不需要你懂Spring的内在原理，或者你遇到的大部分问题都可以通过Copy现有的代码来搞定，我们需要的只要注重业务逻辑，Cover工作内容还是很容易的。但是作为一个有追求的程序员，如果不懂Spring，好像貌似没办法在这个圈子混下去了（毕竟意外和失业不知道哪个先到来），所以还是要懂Spring框架。本系列的目的就是从一个使用了一段时间Spring，但是不懂Spring的运行原理的角度来学习Spring 为什么从 ApplicationContext 开始在学习spring的时候，通常对应的启动类的main函数都是如下的： 12345678910public class LeanSpringApplication { public static void main(String[] args) { String beanPath = &quot;classpath:/base/beans.xml&quot;; ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(beanPath); for (String beanDefinitionName : context.getBeanDefinitionNames()) { System.out.println(context.getBean(beanDefinitionName)); } }} 主要的代码其实就 new ClassPathXmlApplicationContext，因此在使用的角度来说，从ApplicationContext 入手是最合适的。 首先看一下ApplicationContext的继承关系。 从顶层往下看，ApplicationContext 实现了BeanFactory接口，因此ApplicationContext也提供了BeanFactory的能力。 那么BeanFactory有那些能力？总结来看，其实就只有getBean的能力，getBean的目的是根据输入的参数(name,className)，从容器中得到对应的bean。","link":"/2023/12/09/spring-ApplicationContext/"}],"tags":[{"name":"spring","slug":"spring","link":"/tags/spring/"}],"categories":[],"pages":[]}